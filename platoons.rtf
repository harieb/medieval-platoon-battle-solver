{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import itertools as it\
\
def XyZ(a): \
    b = []\
    for c in a.split(';'):\
        d, e = c.split('#')\
        b.append((d, int(e)))\
    return b\
\
def ChEck(A,B): \
    D = \{\
        'Militia': ['Spearmen', 'LightCavalry'],\
        'Spearmen': ['LightCavalry', 'HeavyCavalry'],\
        'LightCavalry': ['FootArcher', 'CavalryArcher'],\
        'HeavyCavalry': ['Militia', 'FootArcher', 'LightCavalry'],\
        'FootArcher': ['Spearmen', 'HeavyCavalry'],\
        'CavalryArcher': ['Militia', 'CavalryArcher']\
    \}\
    if B in D.get(A,[]): return 1\
    elif A in D.get(B,[]): return -1\
    else: return 0\
\
def FiGhT(p,q): \
    a,b = p; x,y = q\
    z = ChEck(a,x)\
    if z == 1: return b*2 > y\
    elif z == -1: return b > y*2\
    else: return b > y\
\
def SoLvE(m,n): # Find solution\
    for o in it.permutations(m):\
        w = 0\
        for i in range(5):\
            if FiGhT(o[i],n[i]): w += 1\
        if w >= 3: return ';'.join(f"\{k\}#\{v\}" for k,v in o)\
    return "No winning arrangement"\
\
# Inputs (embedded in code)\
M = "Spearmen#10;Militia#30;FootArcher#20;LightCavalry#1000;HeavyCavalry#120"\
N = "Militia#10;Spearmen#10;FootArcher#1000;LightCavalry#120;CavalryArcher#100"\
\
# Execute\
m_pl = XyZ(M)\
n_pl = XyZ(N)\
print(SoLvE(m_pl, n_pl))}